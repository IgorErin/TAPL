Lmb (Just "fac") (Int :-> Int) (Idx fac :@: Int 4) :@: Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1))))))
Lmb (Just "fac") (Int :-> Int) (Idx fac :@: Int 4) :@: Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1))))
Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: Int 4
If (BinOp (Int 4) Eq (Int 1)) (Int 1) (BinOp (Int 4) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 4) Sub (Int 1)))
If Fls (Int 1) (BinOp (Int 4) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 4) Sub (Int 1)))
BinOp (Int 4) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 4) Sub (Int 1))
BinOp (Int 4) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: BinOp (Int 4) Sub (Int 1))
BinOp (Int 4) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: Int 3)
BinOp (Int 4) Mul (If (BinOp (Int 3) Eq (Int 1)) (Int 1) (BinOp (Int 3) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 3) Sub (Int 1))))
BinOp (Int 4) Mul (If Fls (Int 1) (BinOp (Int 3) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 3) Sub (Int 1))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 3) Sub (Int 1)))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: BinOp (Int 3) Sub (Int 1)))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: Int 2))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (If (BinOp (Int 2) Eq (Int 1)) (Int 1) (BinOp (Int 2) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 2) Sub (Int 1)))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (If Fls (Int 1) (BinOp (Int 2) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 2) Sub (Int 1)))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 2) Sub (Int 1))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: BinOp (Int 2) Sub (Int 1))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Idx x) Sub (Int 1)))) :@: Int 1)))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (If (BinOp (Int 1) Eq (Int 1)) (Int 1) (BinOp (Int 1) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 1) Sub (Int 1))))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (If Tru (Int 1) (BinOp (Int 1) Mul (Fix (Lmb (Just "fac") (Int :-> Int) (Lmb (Just "x") Int (If (BinOp (Idx x) Eq (Int 1)) (Int 1) (BinOp (Idx x) Mul (Idx fac :@: BinOp (Idx x) Sub (Int 1)))))) :@: BinOp (Int 1) Sub (Int 1))))))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (BinOp (Int 2) Mul (Int 1)))
BinOp (Int 4) Mul (BinOp (Int 3) Mul (Int 2))
BinOp (Int 4) Mul (Int 6)
Int 24
